name: Build and deploy Node.js project to Azure Function App - acs-outboundv2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # Step A) Check out code
      - name: Checkout repo
        uses: actions/checkout@v4

      # Step B) Set up Node
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Step C) Install dependencies in root
      - name: Install dependencies
        run: npm install

      # Step D) Build => TypeScript => dist/OutboundCallFunction + copy function.json
      - name: Build
        run: npm run build

      # Step E) Move (rename) dist/OutboundCallFunction => OutboundCallFunction
      #         so the final folder is at the root with function.json + index.js
      - name: Rename compiled folder
        run: |
          # Remove any old OutboundCallFunction folder
          rm -rf OutboundCallFunction
          # Move newly built code out of dist/ so Azure sees it as a direct function folder
          mv dist/OutboundCallFunction OutboundCallFunction

      # Step F) Zip
      - name: Zip artifact for deployment
        run: |
          # We zip ONLY the final OutboundCallFunction (compiled),
          # plus node_modules, host.json, package.json, etc.
          zip -r release.zip \
            OutboundCallFunction \
            node_modules \
            host.json \
            package.json \
            package-lock.json \
            -x '*.git*' \
               'dist/*' \
               'OutboundCallFunction/*.ts'
          # Explanation:
          #  - 'OutboundCallFunction/' now has function.json + index.js
          #  - 'node_modules' has dependencies
          #  - 'host.json' is needed at the root
          #  - exclude 'dist/' if it's leftover
          #  - exclude raw .ts if it still exists in OutboundCallFunction

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step G) Download artifact
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      # Step H) Unzip artifact
      - name: Unzip artifact
        run: unzip release.zip

      # Step I) Deploy
      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: 'acs-outboundv2'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_252078F4C6044536BB38C08443C7EA43 }}
          package: '.' 
          sku: 'flexconsumption'
